// **********************************************************************
//
// Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.4
//
// <auto-generated>
//
// Generated from file `CommonBehavior.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#include <CommonBehavior.h>
#include <IceUtil/PushDisableWarnings.h>
#include <Ice/LocalException.h>
#include <Ice/ObjectFactory.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/BasicStream.h>
#include <IceUtil/Iterator.h>
#include <IceUtil/PopDisableWarnings.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 306
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 4
#       error Ice patch level mismatch!
#   endif
#endif

namespace
{

const ::std::string __RoboCompCommonBehavior__CommonBehavior__getPeriod_name = "getPeriod";

const ::std::string __RoboCompCommonBehavior__CommonBehavior__setPeriod_name = "setPeriod";

const ::std::string __RoboCompCommonBehavior__CommonBehavior__timeAwake_name = "timeAwake";

const ::std::string __RoboCompCommonBehavior__CommonBehavior__killYourSelf_name = "killYourSelf";

const ::std::string __RoboCompCommonBehavior__CommonBehavior__getParameterList_name = "getParameterList";

const ::std::string __RoboCompCommonBehavior__CommonBehavior__setParameterList_name = "setParameterList";

const ::std::string __RoboCompCommonBehavior__CommonBehavior__reloadConfig_name = "reloadConfig";

const ::std::string __RoboCompCommonBehavior__CommonBehavior__getState_name = "getState";

}

namespace Ice
{
}
::IceProxy::Ice::Object* ::IceProxy::RoboCompCommonBehavior::upCast(::IceProxy::RoboCompCommonBehavior::CommonBehavior* p) { return p; }

void
::IceProxy::RoboCompCommonBehavior::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::RoboCompCommonBehavior::CommonBehavior>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::RoboCompCommonBehavior::CommonBehavior;
        v->__copyFrom(proxy);
    }
}

::Ice::Int
IceProxy::RoboCompCommonBehavior::CommonBehavior::getPeriod(const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__RoboCompCommonBehavior__CommonBehavior__getPeriod_name);
    ::IceInternal::Outgoing __og(this, __RoboCompCommonBehavior__CommonBehavior__getPeriod_name, ::Ice::Idempotent, __ctx);
    __og.writeEmptyParams();
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::Ice::Int __ret;
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__ret);
    __og.endReadParams();
    return __ret;
}

::Ice::AsyncResultPtr
IceProxy::RoboCompCommonBehavior::CommonBehavior::begin_getPeriod(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__RoboCompCommonBehavior__CommonBehavior__getPeriod_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __RoboCompCommonBehavior__CommonBehavior__getPeriod_name, __del, __cookie);
    try
    {
        __result->prepare(__RoboCompCommonBehavior__CommonBehavior__getPeriod_name, ::Ice::Idempotent, __ctx);
        __result->writeEmptyParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::RoboCompCommonBehavior::CommonBehavior::__begin_getPeriod(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (::Ice::Int)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::RoboCompCommonBehavior::CommonBehaviorPrx __proxy = ::RoboCompCommonBehavior::CommonBehaviorPrx::uncheckedCast(__result->getProxy());
            ::Ice::Int __ret;
            try
            {
                __ret = __proxy->end_getPeriod(__result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__ret);
            }
        }
    
    private:
        
        ::std::function<void (::Ice::Int)> _response;
    };
    return begin_getPeriod(__ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

::Ice::Int
IceProxy::RoboCompCommonBehavior::CommonBehavior::end_getPeriod(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __RoboCompCommonBehavior__CommonBehavior__getPeriod_name);
    ::Ice::Int __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__ret);
    __result->__endReadParams();
    return __ret;
}

void
IceProxy::RoboCompCommonBehavior::CommonBehavior::setPeriod(::Ice::Int __p_period, const ::Ice::Context* __ctx)
{
    ::IceInternal::Outgoing __og(this, __RoboCompCommonBehavior__CommonBehavior__setPeriod_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_period);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    __invoke(__og);
}

::Ice::AsyncResultPtr
IceProxy::RoboCompCommonBehavior::CommonBehavior::begin_setPeriod(::Ice::Int __p_period, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __RoboCompCommonBehavior__CommonBehavior__setPeriod_name, __del, __cookie);
    try
    {
        __result->prepare(__RoboCompCommonBehavior__CommonBehavior__setPeriod_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_period);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

void
IceProxy::RoboCompCommonBehavior::CommonBehavior::end_setPeriod(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __RoboCompCommonBehavior__CommonBehavior__setPeriod_name);
}

::Ice::Int
IceProxy::RoboCompCommonBehavior::CommonBehavior::timeAwake(const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__RoboCompCommonBehavior__CommonBehavior__timeAwake_name);
    ::IceInternal::Outgoing __og(this, __RoboCompCommonBehavior__CommonBehavior__timeAwake_name, ::Ice::Idempotent, __ctx);
    __og.writeEmptyParams();
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::Ice::Int __ret;
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__ret);
    __og.endReadParams();
    return __ret;
}

::Ice::AsyncResultPtr
IceProxy::RoboCompCommonBehavior::CommonBehavior::begin_timeAwake(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__RoboCompCommonBehavior__CommonBehavior__timeAwake_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __RoboCompCommonBehavior__CommonBehavior__timeAwake_name, __del, __cookie);
    try
    {
        __result->prepare(__RoboCompCommonBehavior__CommonBehavior__timeAwake_name, ::Ice::Idempotent, __ctx);
        __result->writeEmptyParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::RoboCompCommonBehavior::CommonBehavior::__begin_timeAwake(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (::Ice::Int)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::RoboCompCommonBehavior::CommonBehaviorPrx __proxy = ::RoboCompCommonBehavior::CommonBehaviorPrx::uncheckedCast(__result->getProxy());
            ::Ice::Int __ret;
            try
            {
                __ret = __proxy->end_timeAwake(__result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__ret);
            }
        }
    
    private:
        
        ::std::function<void (::Ice::Int)> _response;
    };
    return begin_timeAwake(__ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

::Ice::Int
IceProxy::RoboCompCommonBehavior::CommonBehavior::end_timeAwake(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __RoboCompCommonBehavior__CommonBehavior__timeAwake_name);
    ::Ice::Int __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__ret);
    __result->__endReadParams();
    return __ret;
}

void
IceProxy::RoboCompCommonBehavior::CommonBehavior::killYourSelf(const ::Ice::Context* __ctx)
{
    ::IceInternal::Outgoing __og(this, __RoboCompCommonBehavior__CommonBehavior__killYourSelf_name, ::Ice::Normal, __ctx);
    __og.writeEmptyParams();
    __invoke(__og);
}

::Ice::AsyncResultPtr
IceProxy::RoboCompCommonBehavior::CommonBehavior::begin_killYourSelf(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __RoboCompCommonBehavior__CommonBehavior__killYourSelf_name, __del, __cookie);
    try
    {
        __result->prepare(__RoboCompCommonBehavior__CommonBehavior__killYourSelf_name, ::Ice::Normal, __ctx);
        __result->writeEmptyParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

void
IceProxy::RoboCompCommonBehavior::CommonBehavior::end_killYourSelf(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __RoboCompCommonBehavior__CommonBehavior__killYourSelf_name);
}

::RoboCompCommonBehavior::ParameterList
IceProxy::RoboCompCommonBehavior::CommonBehavior::getParameterList(const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__RoboCompCommonBehavior__CommonBehavior__getParameterList_name);
    ::IceInternal::Outgoing __og(this, __RoboCompCommonBehavior__CommonBehavior__getParameterList_name, ::Ice::Normal, __ctx);
    __og.writeEmptyParams();
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::RoboCompCommonBehavior::ParameterList __ret;
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__ret);
    __og.endReadParams();
    return __ret;
}

::Ice::AsyncResultPtr
IceProxy::RoboCompCommonBehavior::CommonBehavior::begin_getParameterList(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__RoboCompCommonBehavior__CommonBehavior__getParameterList_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __RoboCompCommonBehavior__CommonBehavior__getParameterList_name, __del, __cookie);
    try
    {
        __result->prepare(__RoboCompCommonBehavior__CommonBehavior__getParameterList_name, ::Ice::Normal, __ctx);
        __result->writeEmptyParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::RoboCompCommonBehavior::CommonBehavior::__begin_getParameterList(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::RoboCompCommonBehavior::ParameterList&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (const ::RoboCompCommonBehavior::ParameterList&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::RoboCompCommonBehavior::CommonBehaviorPrx __proxy = ::RoboCompCommonBehavior::CommonBehaviorPrx::uncheckedCast(__result->getProxy());
            ::RoboCompCommonBehavior::ParameterList __ret;
            try
            {
                __ret = __proxy->end_getParameterList(__result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__ret);
            }
        }
    
    private:
        
        ::std::function<void (const ::RoboCompCommonBehavior::ParameterList&)> _response;
    };
    return begin_getParameterList(__ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

::RoboCompCommonBehavior::ParameterList
IceProxy::RoboCompCommonBehavior::CommonBehavior::end_getParameterList(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __RoboCompCommonBehavior__CommonBehavior__getParameterList_name);
    ::RoboCompCommonBehavior::ParameterList __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__ret);
    __result->__endReadParams();
    return __ret;
}

void
IceProxy::RoboCompCommonBehavior::CommonBehavior::setParameterList(const ::RoboCompCommonBehavior::ParameterList& __p_l, const ::Ice::Context* __ctx)
{
    ::IceInternal::Outgoing __og(this, __RoboCompCommonBehavior__CommonBehavior__setParameterList_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_l);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    __invoke(__og);
}

::Ice::AsyncResultPtr
IceProxy::RoboCompCommonBehavior::CommonBehavior::begin_setParameterList(const ::RoboCompCommonBehavior::ParameterList& __p_l, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __RoboCompCommonBehavior__CommonBehavior__setParameterList_name, __del, __cookie);
    try
    {
        __result->prepare(__RoboCompCommonBehavior__CommonBehavior__setParameterList_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_l);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

void
IceProxy::RoboCompCommonBehavior::CommonBehavior::end_setParameterList(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __RoboCompCommonBehavior__CommonBehavior__setParameterList_name);
}

void
IceProxy::RoboCompCommonBehavior::CommonBehavior::reloadConfig(const ::Ice::Context* __ctx)
{
    ::IceInternal::Outgoing __og(this, __RoboCompCommonBehavior__CommonBehavior__reloadConfig_name, ::Ice::Normal, __ctx);
    __og.writeEmptyParams();
    __invoke(__og);
}

::Ice::AsyncResultPtr
IceProxy::RoboCompCommonBehavior::CommonBehavior::begin_reloadConfig(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __RoboCompCommonBehavior__CommonBehavior__reloadConfig_name, __del, __cookie);
    try
    {
        __result->prepare(__RoboCompCommonBehavior__CommonBehavior__reloadConfig_name, ::Ice::Normal, __ctx);
        __result->writeEmptyParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

void
IceProxy::RoboCompCommonBehavior::CommonBehavior::end_reloadConfig(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __RoboCompCommonBehavior__CommonBehavior__reloadConfig_name);
}

::RoboCompCommonBehavior::State
IceProxy::RoboCompCommonBehavior::CommonBehavior::getState(const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__RoboCompCommonBehavior__CommonBehavior__getState_name);
    ::IceInternal::Outgoing __og(this, __RoboCompCommonBehavior__CommonBehavior__getState_name, ::Ice::Normal, __ctx);
    __og.writeEmptyParams();
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::RoboCompCommonBehavior::State __ret;
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__ret);
    __og.endReadParams();
    return __ret;
}

::Ice::AsyncResultPtr
IceProxy::RoboCompCommonBehavior::CommonBehavior::begin_getState(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__RoboCompCommonBehavior__CommonBehavior__getState_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __RoboCompCommonBehavior__CommonBehavior__getState_name, __del, __cookie);
    try
    {
        __result->prepare(__RoboCompCommonBehavior__CommonBehavior__getState_name, ::Ice::Normal, __ctx);
        __result->writeEmptyParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::RoboCompCommonBehavior::CommonBehavior::__begin_getState(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::RoboCompCommonBehavior::State)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (::RoboCompCommonBehavior::State)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::RoboCompCommonBehavior::CommonBehaviorPrx __proxy = ::RoboCompCommonBehavior::CommonBehaviorPrx::uncheckedCast(__result->getProxy());
            ::RoboCompCommonBehavior::State __ret;
            try
            {
                __ret = __proxy->end_getState(__result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__ret);
            }
        }
    
    private:
        
        ::std::function<void (::RoboCompCommonBehavior::State)> _response;
    };
    return begin_getState(__ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

::RoboCompCommonBehavior::State
IceProxy::RoboCompCommonBehavior::CommonBehavior::end_getState(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __RoboCompCommonBehavior__CommonBehavior__getState_name);
    ::RoboCompCommonBehavior::State __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__ret);
    __result->__endReadParams();
    return __ret;
}

const ::std::string&
IceProxy::RoboCompCommonBehavior::CommonBehavior::ice_staticId()
{
    return ::RoboCompCommonBehavior::CommonBehavior::ice_staticId();
}

::IceProxy::Ice::Object*
IceProxy::RoboCompCommonBehavior::CommonBehavior::__newInstance() const
{
    return new CommonBehavior;
}

::Ice::Object* RoboCompCommonBehavior::upCast(::RoboCompCommonBehavior::CommonBehavior* p) { return p; }

namespace
{
const ::std::string __RoboCompCommonBehavior__CommonBehavior_ids[2] =
{
    "::Ice::Object",
    "::RoboCompCommonBehavior::CommonBehavior"
};

}

bool
RoboCompCommonBehavior::CommonBehavior::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__RoboCompCommonBehavior__CommonBehavior_ids, __RoboCompCommonBehavior__CommonBehavior_ids + 2, _s);
}

::std::vector< ::std::string>
RoboCompCommonBehavior::CommonBehavior::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__RoboCompCommonBehavior__CommonBehavior_ids[0], &__RoboCompCommonBehavior__CommonBehavior_ids[2]);
}

const ::std::string&
RoboCompCommonBehavior::CommonBehavior::ice_id(const ::Ice::Current&) const
{
    return __RoboCompCommonBehavior__CommonBehavior_ids[1];
}

const ::std::string&
RoboCompCommonBehavior::CommonBehavior::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::RoboCompCommonBehavior::CommonBehavior";
    return typeId;
#else
    return __RoboCompCommonBehavior__CommonBehavior_ids[1];
#endif
}

::Ice::DispatchStatus
RoboCompCommonBehavior::CommonBehavior::___getPeriod(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Idempotent, __current.mode);
    __inS.readEmptyParams();
    ::Ice::Int __ret = getPeriod(__current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
RoboCompCommonBehavior::CommonBehavior::___setPeriod(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::Ice::Int __p_period;
    __is->read(__p_period);
    __inS.endReadParams();
    setPeriod(__p_period, __current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
RoboCompCommonBehavior::CommonBehavior::___timeAwake(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Idempotent, __current.mode);
    __inS.readEmptyParams();
    ::Ice::Int __ret = timeAwake(__current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
RoboCompCommonBehavior::CommonBehavior::___killYourSelf(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.readEmptyParams();
    killYourSelf(__current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
RoboCompCommonBehavior::CommonBehavior::___getParameterList(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.readEmptyParams();
    ::RoboCompCommonBehavior::ParameterList __ret = getParameterList(__current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
RoboCompCommonBehavior::CommonBehavior::___setParameterList(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::RoboCompCommonBehavior::ParameterList __p_l;
    __is->read(__p_l);
    __inS.endReadParams();
    setParameterList(__p_l, __current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
RoboCompCommonBehavior::CommonBehavior::___reloadConfig(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.readEmptyParams();
    reloadConfig(__current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
RoboCompCommonBehavior::CommonBehavior::___getState(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.readEmptyParams();
    ::RoboCompCommonBehavior::State __ret = getState(__current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

namespace
{
const ::std::string __RoboCompCommonBehavior__CommonBehavior_all[] =
{
    "getParameterList",
    "getPeriod",
    "getState",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "killYourSelf",
    "reloadConfig",
    "setParameterList",
    "setPeriod",
    "timeAwake"
};

}

::Ice::DispatchStatus
RoboCompCommonBehavior::CommonBehavior::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< const ::std::string*, const ::std::string*> r = ::std::equal_range(__RoboCompCommonBehavior__CommonBehavior_all, __RoboCompCommonBehavior__CommonBehavior_all + 12, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __RoboCompCommonBehavior__CommonBehavior_all)
    {
        case 0:
        {
            return ___getParameterList(in, current);
        }
        case 1:
        {
            return ___getPeriod(in, current);
        }
        case 2:
        {
            return ___getState(in, current);
        }
        case 3:
        {
            return ___ice_id(in, current);
        }
        case 4:
        {
            return ___ice_ids(in, current);
        }
        case 5:
        {
            return ___ice_isA(in, current);
        }
        case 6:
        {
            return ___ice_ping(in, current);
        }
        case 7:
        {
            return ___killYourSelf(in, current);
        }
        case 8:
        {
            return ___reloadConfig(in, current);
        }
        case 9:
        {
            return ___setParameterList(in, current);
        }
        case 10:
        {
            return ___setPeriod(in, current);
        }
        case 11:
        {
            return ___timeAwake(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
RoboCompCommonBehavior::CommonBehavior::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->endWriteSlice();
}

void
RoboCompCommonBehavior::CommonBehavior::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
}

void 
RoboCompCommonBehavior::__patch(CommonBehaviorPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::RoboCompCommonBehavior::CommonBehaviorPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::RoboCompCommonBehavior::CommonBehavior::ice_staticId(), v);
    }
}
